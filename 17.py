import doctest

"""
* Make Shape a set
"""

class Shape(set):

    def __repr__(self):
        return f"Shape({', '.join(repr(x) for x in sorted(self))})"

    def translate(self, dx=0, dy=0):
        """
        >>> Shape([(0, 0)]).translate(dx=1, dy=1)
        Shape((1, 1))

        >>> Shape([(0, 0)]).translate(dx=-1)
        Shape((0, 0))

        >>> Shape([(0, 0)]).translate(dx=7)
        Shape((0, 0))
        """
        new_shape = Shape([(x+dx, y+dy) for x, y in self])
        if new_shape.min_x() < 0 or new_shape.max_x() > 6:
            return self
        return new_shape

    def overlaps(self, shape):
        """
        >>> Shape([(1, 1)]).overlaps(Shape([(1, 1)]))
        True

        >>> Shape([(1, 2)]).overlaps(Shape([(1, 1)]))
        False
        """
        for position in self:
            x, y = position
            if x < 0:
                return True
            if x > 6:
                return True
            if y < 1:
                return True
            if position in shape:
                return True
        return False

    def min_x(self):
        """
        """
        return min(x for x, y in self.union(set([(0, None)])))

    def max_x(self):
        """
        """
        return max(x for x, y in self.union(set([(6, None)])))

    def min_y(self):
        """
        """
        return min(y for x, y in self.union(set([(None, 0)])))

    def max_y(self):
        """
        >>> Shape([(0, 2), (0, 4)]).max_y()
        4
        """
        return max(y for x, y in self.union(set([(None, 0)])))

    def merge(self, shape):
        """
        >>> Shape([(0, 0)]).merge(Shape([(1, 1)]))
        Shape((0, 0), (1, 1))
        """
        return Shape(self.union(shape))

    def prune(self):
        """
        """
        lines_to_prune = self.reachable_depth()
        return lines_to_prune, self.translate(dy=-lines_to_prune)

    def reachable_depth(self):
        """
        >>> shape = Shape([
        ...                            (3, 2),
        ...    (0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1),
        ... ])
        >>> shape.print()
        |...#...|
        |######.|
        +-------+
        >>> shape.reachable_depth()
        0
        """
        def inner(x, y, trail=[]):
            if (x, y) in cache:
                return cache[(x, y)]
            if y <= 0:
                return 0
            else:
                result = min([y]+[
                    inner(x2, y2, trail+[(x2, y2)])
                    for (x2, y2)
                    in [
                        (x-1, y),
                        (x+1, y),
                        (x, y-1),
                    ]
                    if
                        x2 >= 0 and
                        x2 <= 6 and
                        (x2, y2) not in self and
                        (x2, y2) not in trail
                ])
                cache[(x, y)] = result
                return result
        cache = {}
        return inner(0, self.max_y()+1)

    def print(self):
        """
        >>> Shape([(0, 1)]).print()
        |#......|
        +-------+
        """
        y = self.max_y()
        while y > 0:
            print("|{}|".format("".join(
                "#" if (x, y) in self else "."
                for x
                in range(7)
            )))
            y -= 1
        print("+-------+")

def solve(number_of_stones, jet_pattern, debug=False):
    """
    >>> solve(100, ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>")
    157

    #>>> solve(2022, ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>")
    #3068
    """
    jet_pattern_index = 0
    rocks = [
        Shape([
            (0, 0), (1, 0), (2, 0), (3, 0),
        ]),
        Shape([
                    (1, 2),
            (0, 1), (1, 1), (2, 1),
                    (1, 0),
        ]),
        Shape([
                            (2, 2),
                            (2, 1),
            (0, 0), (1, 0), (2, 0),
        ]),
        Shape([
            (0, 3),
            (0, 2),
            (0, 1),
            (0, 0),
        ]),
        Shape([
            (0, 1), (1, 1),
            (0, 0), (1, 0),
        ]),
    ]
    rock_index = 0
    contour = Shape([])
    total_pruned_lines = 0
    for i in range(number_of_stones):
        rock = rocks[rock_index]
        rock_index = (rock_index + 1) % len(rocks)
        rock = rock.translate(dx=2, dy=contour.max_y()+4)
        if debug:
            rock.merge(contour).print()
            print()
        while True:
            if jet_pattern[jet_pattern_index] == "<":
                dx = -1
            else:
                dx = 1
            jet_pattern_index = (jet_pattern_index + 1) % len(jet_pattern)
            rock_move = rock.translate(dx=dx)
            if not rock_move.overlaps(contour):
                rock = rock_move
            rock_down = rock.translate(dy=-1)
            if rock_down.overlaps(contour):
                contour = contour.merge(rock)
                pruned_lines, contour = contour.prune()
                total_pruned_lines += pruned_lines
                break
            else:
                rock = rock_down
    return contour.max_y() + total_pruned_lines

number_of_stones = 1000000000000
jet_pattern = "><<><>><<<>><><<<>>>><<<>><<<><<<<>>>><<>>><><>>>><<<<>><<<<><<<<>>>><<>>><>>>><<<<>>>><<<<><<<>>><<<<>>><<<><<<>><<<>><<><>><<>><<<>><<<>>>><<<><<<><<<<><><<<<>>><<<>><<><<>><<<<><<><>>><<<><<<>>><<<><>>><<<<>><<<>><<<<>><<>><<<><>>><<<>>>><<<<>>>><<>><<>>>><>><<>>>><<<>>>><<<<><<<><<>>><<<<>>><<>>><<<<>><><<<>><<<>>><<><><<>><<<><<<<>>>><<<>>><<>><<<>>>><><>>><>>><<<>>><<<>>><<>><<<>><>>>><><<>>>><><>>>><<<>>><<<<><>>>><>><<<<>>>><<<>><<<><<><<<>><><>>>><<<<>><>>><<>><<>>><<<><<<>>>><<>>>><><<>>><>>>><<>>><><<><<<<>><<>>>><<>>>><>><<<<><>>>><>>><>>>><<<>><<<><<<<><<<>>><>>>><<<<>><>>>><<<<>>><><<<<><>>><<<<>><<><<<>>>><<<<>><<<><>>>><><<<<>>>><<<>>><<<><<<>>>><><<<<>>><<><<<<>>><>><<<>>>><>>><<><<>>>><>><<<>><>><<>><>>>><<<><>>><<<>>>><<<<>>>><<<<>>>><<<><<>><><>>><<>><>>>><<<<><<<<>>><<<<>>><>><>><>><<<>>>><><>>>><<><<<>>>><<<<>>>><<<>>>><<>><>>>><>><><<<>>>><<><<><<<<>>>><>>>><<<>><>><<<<><<>><>>>><<<<>>>><<<<>>><><<><>><<>>><<<>>><<<>><<>>><<<<>>><<>><<><<<<>>>><<<>>><>><>>><>>><<<<>><<<>>><>>>><<<><<<><<<>>><<<<>>>><<<>>><<<>>><<<>>><<<<>>>><<<>>><<<>>>><<>>><<<<><<<>><<<>>>><<<<>>>><>>><<<<>><<>><<<<><>><<>>>><<>>><<<>>>><<><>>><<>><>>>><<<<>>><<<<><<<<><>>>><>><<>><>>><<<>>>><<<<>>><>>>><><<<<>>><<<<><<<><<>><<<<>>><<<<>><<>>>><<<>>>><<<<>><<><<<><<<>>><<<<>>><>><<<<><<<><<>>>><<<><<<<>><<<><<<<>>>><<<<><<>>><<<<>>><<<>>>><><<<><>>>><<<><<<<>>><<>>>><<<<>>>><<>>><>><<<>><>>>><<<<>>>><<<<>>>><<>>>><<>>><<<><<><>>>><>>>><<>>><<<>>>><<<><<<<><>>><<<>>>><<<<>><<<>>><<>>>><<<<><<<>><<>>>><><<<>>><<<><<<>>>><<>>>><<<>>>><<<<>>>><>>>><<<>><>><<<>><>>>><<>>><>><><<<>>>><<<<>>>><>>><<<<><<<>><<>><<<<>>><<>><<>>><<<>>><><<>><<<<>><<>>>><<<<><<<>>><>><<<>>>><>><<<<>><<<>>>><<<<>><><<>><<<><<<>><<<>>>><<<<>><<<<>>><<<><<<<>>>><<<>><<<<><<<>>><<<><<>><<>>><<<<>><>>>><<><<<>>><<>>><<<>>>><<<><<>><><>>><>>><<<>><<<>>><<>>><<<<><><<<<>><<<<>>><<<>>><<<<>><<<><<>>>><>><<<>><<<<>><>>>><<<><<>>>><<<>>><>><<<<>>>><<<<>>>><<<>>>><<<><><<<<>>>><<<<><<<>>><<<>><<>>><<>>><>>>><<<>>><<<>>>><<>><<>><<>>><<<>>>><<><<<><<<<>><<<<><>><<<<>><>>>><<>><<<<>>><>>><>>><<<>>><<<<>>><<<>>><<<<>>><<<>>><><>><<<<>>>><>>>><><<<<><<>>><<<>>>><<<>>><<<<>>><<<>>><<>>><<<><<<<>><<>>><<<>>><<<<>>><>>>><<<>>><<<>>><>>>><<>>><<<<>>><<<>><<<><<<<><<>><<<><<<>><<<<>>>><><<<>>><<<<><><<<<>><<<<>><<<>><<<<>>>><<>><<<>>><><>><<<>>>><<<<><<<<>><<><<><<<<><<><<<><>><<>><>>><<<<>>><<<>>>><>>>><<><>>>><><<<<>>>><<<><>>><><<<<>><<>><<>>><<>>>><<>>><>>>><<<<>>><<>>>><<<><<<<>>><<><<>><<<>><>>>><<<>>>><<>>><<<><>><<<><<<<><<>><>><<>>><<<>><<<<>>><<<<><<<>>>><<<<>><<<>><<<<><>>><<<><<<<>>><>>>><<>><<<>>>><><<>>><<><<>>>><<>>><<<<>>>><<<<><<<<>><<>><>>><>>><<><<>>>><>>>><<<>><<<><<<<>>>><<>>>><><<<><<>><<>>>><<>>><<<<><<<<>>>><>>><<<<>><<<>><>><<<<>>>><>>>><<<>>>><<>>>><><<>>>><<<>>>><>><>>><<<><<<>>><>><<<<>><>><<<>>>><<<<>>><>>><>><<<><<<><<<>>><>>><<>>>><<<<>>><<<>><<<>><<>><<<<>>>><<>>>><<<><>>><<><<<<>>>><<<><<<<><<<>>>><<<><<><>>><<<>>>><>>>><<<<>>><><<<>>>><>><<><<<><<<>>><<>><<<<>>>><<<><<<<>>>><>>><<<>>><><<<<>><>>><<<><<<>>>><<><<<<>>><<<>>>><<<<>><<>>><><<><<>><>>>><<<<>>>><><><<<<>>>><<<>>>><>>><><<<<>><<<><<<<>>>><<>>><<<>>><<><>>><<<<>><<>>>><>>><<>>>><<<<>><<<>>>><<<><<>>>><<>>>><<>><<><>>>><<>>><<<<>>>><<<<>><<<<><<>>>><<<>>><<><<><<<><<>>>><><<><<>>>><<>>>><<<>>><<<>>><<>>><<>><><><<<>>><<>>>><<<>><<<>><<>>><<<>><>>>><<>>><<<>>><>>><<<<><<>>>><<>>><<>>>><<>><>>><<><<<><<<><<<<>><<<<>>>><<<<>>>><<<<>>>><<>><>>>><<<<>>>><<>>>><<<<>><<<<>><<><<<<>>><<<<>>><<<><>><>><<>><<><<>>><<>>>><<>><>>><>>><<>>>><<<><>>>><<>>><<>>><<<<>>><<<>>>><>>>><>>>><<>>>><<<>><><<<<>>>><<<<>>>><<><<<>>><<<<><<>><<>><><<<>>><>>>><<<>>>><<<<>><>>>><<>><<><<<<>><>><<<<>>><<><><><>><<>>><<<>>>><<<>>><<<>>>><<<>><<><<>><<<>>>><><>>>><<<<>>><<<<><>>>><>><<>>><<>>>><<<>><><<<<>><<<<>>><<<<>><>><>>><<<<><<<<>>>><<<<><<<>><<<>>>><>>>><<<><<<<><<<<><<>>><<>><<<<>><<<><<>>><<<>><>>><>>><><<><<<>><>><>>><<>>><<<<>><>>><<<><><<<<>><<>>>><<<>><<>><<<>>><<<><>>><<<>>><<<<><>>><<>><<<><<<<><<<<>><<>>><>><>><<><><<<>>><<>>><<>>>><<>>><<<><<<>><<<<>>><<<><<>>><<>>><>>><>>>><<><<<<>>>><>>>><>>><<<<>>><<<<>>>><<<<>><<<<>>>><>>>><<>>>><<>>>><<<>>><><<<>>>><><><<<>>><<>><>><<<<>><<>>><<<><<<>><<<><<<<>>>><<<>><<>><<>>>><>>>><<<>>>><<<<>><>>><>>>><<<<>>><<>>><<<>><<<<><<<>>><<<<>><>><<<>><<>>><<<<>>>><<<<>>>><>>>><<<<>><<>><<<>>><<<<><<>>><<<<>><<<<>>><>><><<<<>>><<<><<<>>>><<>><<>><>>><>>>><<<<><<<<><<>>><>>>><<>>>><><<>><>>>><><>>>><<><<<<><<>>>><<<<><<<<>>><<>>>><<>>>><<<<>>><<>><>>><>><<><>>>><<<>><<<>>><<<>>><>>>><<<><>>><<>>>><<>>>><<<<>>>><<<>>>><<<>><>>>><>>>><<>>>><<>>>><>>>><<>>>><<<<><>>><<<><><>>><<<<><><>><<>>><<<<><<<>>><<<><<><<><<<<><<><<>>><<<><><<>>>><<<<>>>><<<<>>>><<<>><<>><>><<>>>><<<><<<<><<<<>>>><>><<<<>>>><>>><<<<>><><<><<<<><<>>><><>>>><<<>>><<<>>><><<<<>>>><<<<>>>><<<<><>>>><<<>><<>><>><<<<>><<<<>>><<>>>><<>><<<>>><<>><>>>><<<>>>><<>>>><<>>>><><><<<<><<<>>>><<>><<<<>><<>>>><<<>>>><>>>><<<>><<>>><>>>><<<>>>><<><<>>>><<>><<<>>>><>>><<<<>>><<>>>><<><<>>>><<>>><>>>><<<><<><>>><<<<><<<<>><<<<>>><<<<><<><<>><<>>><<<<>>>><<>>><<<<>>><<<>><<<>>>><<><><<<<>><<<<>>><<>>><>>><<>>><>>><<<>>>><>>>><<>><<<<>>>><<>><<><<>>><<><<<<><><>>><<><<>>>><<<><<<<>>><<<<>>>><>><>>><>><<<<>><>>><<<<>>><><<><<<<>>>><>><<<>>>><<>><>>>><<>>>><<<>>>><<>>>><><<<>><<>>>><<<>>>><>>><<<<>>>><>>><<>><<><><<><>>><<>><<<>>>><<>><><<><<<>><<<>><<<<><<>><<>>><<<<><<<<><<<>>>><<<<><<<><<>>>><<<<><<<><<<<><>><<>>><<<>>>><>>><<<<>>><<>>><<<<>><<<<>><<<>><<><><<<<><<>>>><<<<>>>><<<<>><<<>><<<<>><<<>>>><<>>>><<>>>><<<>><<><<<>>>><>><<<>><<>>>><>><<<>>>><<<>><<<>>>><>><>><<<>><<<><<<><<<<>><>>>><<<<>>>><<<<><<<>>>><<<<>><>>>><<>>><<<>>><<><<<>>>><><<<>><<>>>><<<<>><>><<<<>>>><<>><<<<><<<>>>><>>>><<<><><><>>><<<>>><>>>><<>>>><>><>>><<<><<>>>><<<<>><>>>><<<<><<>>>><>>>><<<>>>><<<<>>><<<<>>>><<<<><<<<>><<<<>>><<<<>><><<><<><>>><<<<>>><<>><<>><<>><<<><<><<>>>><<>><>>><<><<>>>><<<>>><>>>><<>><<<>><>>><><<<>>><<<<><>><<<>>><<<<>>>><<><><<>>><<>><<>>>><<>><>>>><><<<<><>>><<<>>><<<>><<>>>><>>>><>>>><<<><>>>><<>>><<><<><<><<<<>>>><<<>>>><<<><>>>><<<>>>><<<>>><<<><<<<>>><>>>><<<<>>>><<>>>><>>><<>><><>><<<>><<<><<<<>>>><<<<>><<<>>>><>>>><<<><<<>><<>>><>><<>>>><<>>><<<<>>>><<>><<<<>>>><<<<><<>>><<<><<<<>>><<<<><<<<>>>><<<>><<<<><<<>>><<<>>><<<<><<<<><><<<<><>>><<<<>>><<<<>><<<>><<<<>>><<<<>>>><<>>>><>>><<<>><<>>>><>>><<<>><<<><<<>>>><>>><>><<><<<<>><<<<>>><<>>>><<<><<>><<<>>><<<>><<<<><<<<>><>><<<<><>><>>>><><<<<>>><><<<<>>>><><<<<>><>><<<>><<<<><<>><<<><<<><>><<<><>>>><<<><<<>><<<>>>><<>><<<><>><>><>><<>><<<<>><>>><>><<<>>>><>><<<<>>>><>><<<<>>>><<>>>><<>><<>>>><<><<<>><<><<<<>>><<<<><<>>><<>>>><<<<><<>><<<><<<>>><<<>>><<<>><<<<><<<>><>><<<<>>>><<<<>><<<>><><<<>>>><>><<<>>>><<>><<><<<<><<<<>><<<<><>><<<>>>><<>>><>><<<>>><<<<>>><>>><<>>>><>><<<<>><<<<>><><<<>><<>><>><<>>><<<>><<<<>>>><<<>>><<<>>><><<<><<>>><<<<>><<><<<<><<>>>><<<>>><<>><>><>>>><<<<>>><<><>>><>>><<<<>><<<<>>>><<<<>>>><<>>>><>>>><<<>><<<><<<>>>><><<><<<<><<<<>><>>><<<>>><><<>><<<<>><<<<>>>><>>>><<<<>>>><<<<><><>>><<<>><><<<>>>><>><<<>>>><<><<<>>><<<<><>>><<<<>>>><<<<>>><<<><<<>><<<><<>>>><<><<<<>>><<<<>>><><>>>><>>><<<>>>><<<<>>>><<>>><>>><<<><<<><>>><<>><<<<>>><>>>><<<>><<<><<<><<>>><<<<>>><<<>>>><>>><<<>>><<<<>>>><<>><<<<>>><<<>>><<<<>><<<<><<<<>><<<<><>>><<<><>>>><<<>>><<>>>><>>>><><<>>>><<>><<<<>>><<<<>>><<<>><<<>>><<<<>><<<<><<<>>>><<<><>>><<<><<<<><<>><<<>>><>>><<<<>>><<>><<>>><<<>>><<<><<<>><<<<>>>><<<>><<<<>><<<><<>>>><<<<><<<<>>><<<<><<>>>><<<><<<<><<<<>>><>>><<<<><<>><<<>><<<>><<>><<<><>><<>><>>>><><<<<><<<>>>><<<><<<>>>><>><<<><<>><>><<<<>>>><<<>>><>>><<<<><<>>><<>>><<<>>><<<>>><<>><<<<>><>>>><<<><<<<>><>>><<<<>><<<>><<<>>>><<<>>>><><<<>>><>>>><>><<>><<><><<<><>>><<>>>><>>><<<<>>><<<<>><<<><<<>><<>><><<<<>><<<<><>>><<<<>>>><>>>><>>>><<><<<>>>><<<<>><<<<><<<<>>><<<<>>>><<<><<>>><<><<<<>><<>>>><>><<<<><<><<<<>>>><<>>><<<<><<<>>><<<<><<><<<<>><>>><>><<<<>>><<>><<<><<><<>>><<<>>>><<<<>>>><><<<><<<<>>>><<<<>>><<<>>>><>><<<<>>>><<<<><>>><><<<>><>>>><<<<>><>><><<><<<><<<<>>>><>>>><>><<><>>><<<>>>><<<>><>>>><<<<>><<>>>><><<<>><<<>><<>>>><<>>><>><><<<<>><>><>>><>><<<>>>><<<<>>><<>>><<<<>>><<<>>><<>>>><<><<<<>>>><<<<><>><<>>>><>>><>><><<<<>><<>>><<<><<<<>>>><<><<>><<<>>><<><><<<>>><>>>><<<>><<<<>>>><<>>><<>>><<>><><<<<>><<>><<>>><<><<>><<>><<>>>><<<<>>><<><<>>><<<<><<<<>>><<<<>>><<<<>>>><<<><>><>><<<>>>><<<<>>>><<<>><<>>>><<<<>>><<<>>><<>>>><<><<<<><<<>><<<<>>><<<><><<<>>>><>>>><<>>>><>><>>><<<<>>><<<<>>>><>>><>>>><>><<<>>><<>>><><<<<>>>><><<<<><<<<>>>><<<>>>><<>>><<<<>>><>>><<>>><<>><<<>>><<<<>><<<<><<<>><<<>>><>>>><<<<><>>><>>><<<<>>>><<<<>>>><<<><<>><<<<>>><<<>>><<>>><<<<><>>><>>>><<<<>>><<>><<<><<<>>>><<<<><>>>><<<><>>>><<<<>><><<><<>>><>>>><>><<>>>><<<<>><<>>><<<><<<>>><<<<>><>>><>>><>>><<<>><<<>>><<>>>><<<>><<<<>>>><><<<><>>>><<>>>><<<>>>><<<<>>><<><>>>><<>>>><<>>><<<>>>><>>>><<><<<<>>><><<>>><<<>><<<<>>>><<>>>><<><<>>>><<<<>>><>><<>><<>>>><<<>>><<>>>><<>>><<>>><><<><>>><<>>><>>>><><>><<><<>><<><>><<<>><<>>><<<>><<>>>><><<><<<>>>><<<<>>><<><<>>>><<<>>>><>>>><<>>><<>><><><>>>><<<<>>><<<>>>><<<><<>>><>>>><<>>><<>><>>><>>><<<>>>><<>>>><<<>>><<<<><<>>><<>>><<<>>>><<>>>><<<><<<<>><<<>>>><<<>><<<>>><<<>>>><<>><<<><<<<>>>><<>><>><<<>><<>>>><<<>>>><>>>><>>><><<>>>><<<>><<<<>>>><<<<>><<>>><<<>><>>><<<<>><<>>>><><<<<>>>><><><<<<>><>>><<>>>><<<><<>><<<<>>><<<<>>><>>><<<<>><<<><>><<><<>>>><>>>><<<<><<>>>><<>>>><><<><<>>><<<>><>><<<>>><<<>>>><<<<>>><<<<>><>>><>><<<<><<>>><>><<>>>><<><<<<>>><<<<>>><<<>>><>>>><<>><<<<>>>><>><<<>>><><<>>><<<<>><>><><>>><<>>>><<<><<<>>>><<<>>>><><<<<>>><<<<><<>><<<<>>>><<<>>>><<<>>><<<>><<<>><<<>>><<<>>>><<<<>>>><>>>><<<>>><>>>><<>>><>>><>>><>><<<<><>>><>>><<>>><<<<>><><<>>><<>><<<<>><<<<><<>><<<<>><<>>>><<<<>><>>><<<<><<<><<<>>><>>>><<><<<>>>><<<>>><<>>><>>><<>><<>>><<<<>>>><<>>><<<>><<<>>><>>>><<<<>>>><<<<>>><<>>><<>>><<<>>><<<<><<<<>><<<<><<<<><><<<>>><<<>>><>>><><<>><<<<>>>><<<<>>><<>>><<<><>>><<<>>>><<>>><<>>><<<>>>><<>><<>>>><>>>><<<>>><<<><>>>><<<>><>><>>>><><<<>>>><<<<>>>><>>>><<><<<<><>>><>>><<<<>>><<>>>><<<<>><<>><<><<<<>>><>>><<<<><>>>><<<<>>>><<>><>>><<<>><><<>>>><<<><<<<>><<><<>>><>>><<<<>>>><<>><<<<>><<<<>><<"

if __name__ == "__main__":
    doctest.testmod()
    #solve(10, ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>", True)
    print("OK")
